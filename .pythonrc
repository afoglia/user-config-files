from __future__ import print_function

# Enable syntax completion

# TODO: Add fallback to pyreadline, if available. Not simple, as pyreadline
# includes it's own readline
# module. https://pythonhosted.org/pyreadline/introduction.html#conflicts
readline = None
try:
  import readline
except ImportError as e:
  print("Unable to load default readline: %s" % e)
  try:
    # Fallback to gnureadline, if installed.
    # https://pypi.org/project/gnureadline/
    import gnureadline as readline
  except ImportError:
    print("readline module not available")
  else:
    print("Using gnureadline")

if readline:
  import rlcompleter
  if not readline.get_completer():
    # Will not be set if not using standard readline package.
    readline.set_completer(rlcompleter.Completer().complete)
  if "libedit" in readline.__doc__:
    # Macs use libedit, which has a different api.
    # https://stackoverflow.com/a/7116997
    readline.parse_and_bind("bind ^I rl_complete")
  else:
    readline.parse_and_bind("tab: complete")

  del rlcompleter

del readline


# Use pprint for printing
# Modified from https://stackoverflow.com/a/17248483

import sys

class DisplayHook(object):
  """Display hook that uses pprint."""

  def __init__(self, orig_hook, pretty=False):
    self.orig_hook = orig_hook
    import pprint
    self.pprint = pprint
    self.pretty = pretty

  # TODO: Try changing the method when toggled, rather than checking
  # on each call.
  def __call__(self, value):
    if self.pretty:
      if value != None:
        __builtins__._ = value
        self.pprint.pprint(value)
    else:
      self.orig_hook(value)

  def on(self):
    self.pretty = True

  def off(self):
    self.pretty = False

_displayhook = DisplayHook(sys.displayhook)

sys.displayhook = _displayhook

__builtins__.pprint_on = _displayhook.on
__builtins__.pprint_off = _displayhook.off

del DisplayHook, sys

pprint_on()
