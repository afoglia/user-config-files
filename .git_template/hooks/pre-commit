#!/bin/bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
git diff-index --check --cached $against --
if [ "$?" != 0 ]; then
  exit 1
fi


#
# Run git-lint
#
# Based very, very loosely on
# https://github.com/sk-/git-lint/blob/master/scripts/pre-commit.git-lint.sh
#

# Bash version (uses arrays)
if type git-lint > /dev/null ; then

  # This script runs on both Linux and Mac. The latter doesn't have
  # --no-run-if-empty flag, so we'll check if there are any files
  # first.

  # Cache list of files to lint. This uses bash arrays, hence /bin/bash, not
  # /bin/sh.
  changed_files=()
  while read -d '' -r filename; do
    changed_files+=("${filename}")
  done < <(git diff-index -z --cached HEAD --name-only --diff-filter ACMRTUXB)

  if [ "${#changed_files[@]}" -ne 0 ]; then

    # git-lint will work on the files on disk, i.e. the working
    # copy. We don't want that. Instead we'll checkout the changed
    # files, and only the changed files, from the index to temp
    # folder. Then trick git lint to run against that.
    #
    # Another possible approach, suggested by many sources online
    # suggest just stashing the working copy only. The unstash can be
    # done by a trap, which would catch most cases, but leave things
    # in a unexpected state if things go wrong. And even if they work,
    # they will cause problems with any editors that have the files
    # open.
    GIT_DIR="$( cd $(git rev-parse --git-dir) && pwd )"

    tempdir=$(mktemp -d "${TMPDIR:-/tmp}/precommitXXXXXX")
    trap 'rm -rf "${tempdir}"' EXIT

    # Copy .gitlint.yaml if one exists.
    if [ -f .gitlint.yaml ]; then
      cp .gitlint.yaml "${tempdir}/"
    fi

    git checkout-index "--prefix=${tempdir}/" -f -- "${changed_files[@]}"

    pushd "${tempdir}" > /dev/null
    GIT_DIR="${GIT_DIR}" git lint "${changed_files[@]}"
    lint_exit_code="$?"

    if [ "${lint_exit_code}" != "0" ]; then
      echo "There are some problems with the modified files.";
      echo "Fix them before committing or suggest a change to the rules defined in REPO_HOME/.gitlint.yaml.";
      echo "If it is not possible to fix them all commit with the option --no-verify.";

      exit 1;
    fi

    popd > /dev/null
  fi
else
  echo "Skipping git-lint: Not installed"
fi
